//Code for player 2d platformer character

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player2dPlatMovement : MonoBehaviour
{

    public CharacterController2DPlat controller;
    public FloatValue currentLives;
    public Signal playerLivesSignal;

    float horizontalMove = 0f;

    public float runSpeed;

    public bool jump = false;
    public bool crouch = false;
 
    public GameObject deathEffect;
    public GameObject restart;

    public Vector3 change;
    private Animator animator;

    public PlatSpawnMaster spawn;

    public AudioSource audioOn;
  

    public void Start()
    {
        animator = GetComponent<Animator>();
        if (currentLives.RuntimeValue == 3)
        {
   
            this.gameObject.transform.position = new Vector3 (-1.69f, -3.36f, 0);
        }
        else if (currentLives.RuntimeValue <= 2)
        {
            if (spawn.positionOne == true)
            {
                this.gameObject.transform.position = new Vector3(-1.69f, -3.36f, 0);
            }
    
            else if (spawn.positionTwo == true)
            {
                this.gameObject.transform.position = new Vector3(46.77f, -3.36f, 0);
            }
        }
       
    }


    // Update is called once per frame
    public void Update()
    {
        UpdateAnimationAndMove();
        change = Vector3.zero;
        change.x = Input.GetAxisRaw("Horizontal");
        //y vector to be input via vertical movemnt button
        change.y = Input.GetAxisRaw("Vertical");
        //is the change is not zero then trigger updateaninamtionandmove which enables movement
        if (change != Vector3.zero)

        {
            UpdateAnimationAndMove();

        }

        if (runSpeed != 0)
        {
            horizontalMove = Input.GetAxis("Horizontal") * runSpeed;

            if (Input.GetButtonDown("Jump"))
            {
                audioOn.Play(0);
                jump = true;
                UpdateAnimationAndMove();

            }




            if (Input.GetButtonDown("Crouch SIdescrowl"))
            {
                crouch = true;
            }

            else if (Input.GetButtonUp("Crouch SIdescrowl"))
            {
                crouch = false;
            }
        }
    }
    void UpdateAnimationAndMove()
    {//if the vector 3 is not all 0
        if (change != Vector3.zero && controller.m_Grounded == true)
        {
           

            //call MoveCharacter method
         
            //call the animator moveX animation when the x vector is changed
            animator.SetFloat("moveX", change.y);
            //call the animator moveX animation when the y vector is changed
          
             animator.SetBool("moving", true);
            animator.SetBool("jumpleft", false);
           
        }

        else if (controller.m_Grounded == false)
        {
            animator.SetFloat("moveX", change.y);
            animator.SetBool("moving", true);


          
            animator.SetBool("jumpleft", true);
            
        
        }
        else
        {// else if the vector3 is not changed set moving bool to false
            animator.SetBool("moving", false);
            animator.SetBool("jumpleft", false);
            animator.SetBool("jumpright", false);
        }
    }

    public void FixedUpdate()
    {
        controller.Move(horizontalMove * Time.fixedDeltaTime, crouch, jump);
        jump = false;
    }

    public void OnTriggerEnter2D(Collider2D other)
    {
        if (other.gameObject.CompareTag("enemy"))
        {

            runSpeed = 0f;
            StartCoroutine(deathui());
            Knock();
            
        }
    }

    private void DeathEffect()
    {
        //if death effect is not not active
        if (deathEffect != null)
        {


            this.gameObject.SetActive(false);
            GameObject effect = Instantiate(deathEffect, transform.position, Quaternion.identity);


        }
    }


    public void Knock()
    {
        

        if (currentLives.RuntimeValue > 0)

        {
            StartCoroutine(gotHit());
        }
        else if (currentLives.RuntimeValue <= 0)
        {
            DeathEffect();
            StartCoroutine(deathui());
        }
        
    }

    public IEnumerator deathui()

    {
        yield return new WaitForSeconds(2f);
    
       
    }

    public void Restart()
    {
        restart.SetActive(true);
    }

    public void GameOver()
    {
        gameObject.SetActive(true);
    }

    public IEnumerator gotHit()
    {
        if (currentLives.RuntimeValue > 1)
        {
            Debug.Log("test");
            //current health is - by the damage
            currentLives.RuntimeValue -= 1;

            playerLivesSignal.Raise();
            Restart();
            DeathEffect();
            yield return new WaitForSeconds(1f);
        }
        else if (currentLives.RuntimeValue == 1)
        {
            Debug.Log("test");
            //current health is - by the damage
            currentLives.RuntimeValue -= 1;

            playerLivesSignal.Raise();
            DeathEffect();
            yield return new WaitForSeconds(1f);
        }

    }    
}
