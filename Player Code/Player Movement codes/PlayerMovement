using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Assets.HeroEditor4D.Common.CharacterScripts;
using HeroEditor4D.Common.Enums;
using UnityEngine.SceneManagement;

public class PlayerMovement : MonoBehaviour

{
    //Key compontants 
    private Rigidbody2D myRigidbody;
    private Animator animator;

    public RoomController controller;
    [Header("State Machine")]

    public CharacterState characterState;


    [Header("Player Speed")]
    public float speed;


    private PlayerShoot shootcall;


    [Header("Inventory / Items")]
    public Inventory playerInventory;
    public PlayerWeaponInventory weapon;
    public GameObject BombPrefab;
    public SpriteRenderer recivedItemSprite;


    [Header("Health and Armour and Death Effect")]
    public FloatValue currentHealth;
    public FloatValue currentarmour;
    public GameObject deathEffect;

    [Header("Signals")]
    public Signal playerHealthSignal;
    public Signal playerArmourSignal;
    public Signal bombsignal;

    public PlayerShooting fire;

    public AudioSource Sword;

    public int audiohit;
    public AudioSource hit1;
    public AudioSource hit2;
    public AudioSource hit3;


    [HideInInspector]
    public Vector3 change;

    [HideInInspector]

    
    public Vector3 shootchange;

    public Character4D character;
    public AnimationManager anim;

    public float attackdelay;

    public bool canattackbool = true;

    public bool canbomb = true;
    //been hit
    public bool hit;
    //player is dead
    public bool dead;
    //if in cabin so cant attack
    public bool cabin;
    
    
    public void Start()
    {
        controller = FindObjectOfType<RoomController>();

        character.SetDirection(Vector2.down);
        anim.SetState(CharacterState.Idle);
        myRigidbody = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        shootcall = GetComponent<PlayerShoot>();

        Scene currentScene = SceneManager.GetActiveScene();

        // Retrieve the name of this scene.
        string sceneName = currentScene.name;

        if (sceneName == "Outside")
        {
            character.SetDirection(Vector2.up);
        }
        else
        {
            character.SetDirection(Vector2.down);
        }

    }

    // Update is called once per frame
    public void Update()
    {
        if (controller.updayedRoom == false)
        {
            speed = 0;
        }

        else if (controller.updayedRoom == true)
        {
            change = Vector3.zero;
            //x vector to be input via horizontal movemnt buttons
            change.x = Input.GetAxisRaw("Horizontal");
            //y vector to be input via vertical movemnt button
            change.y = Input.GetAxisRaw("Vertical");
            UpdateAnimationAndMove();

            transform.Translate(new Vector3(change.x, change.y, 0) * speed * Time.deltaTime);

            playerDirection();

            if (Input.GetButtonDown("attack") && hit == false && anim.IsAction == false && canattackbool == true && cabin == false && speed != 0)
            {
                anim.Slash(character.WeaponType == WeaponType.Melee1H);
                StartCoroutine(canattack());
            }

            //If attack button is down and state is not in attack or stagger start attack co

            else if (hit == true)
            {
                anim.SetState(CharacterState.Hit);
                characterState = CharacterState.Hit;
            }

            if (Input.GetButton("shoot") && hit == false && anim.IsAction == false && fire.canFire == true && cabin == false)
            {
                characterState = CharacterState.Attack;
                anim.ShotBow();

            }

            if (Input.GetButton("PlaceBomb") && playerInventory.bomb > 0 && hit == false && anim.IsAction == false && fire.canFire == true && cabin == false && canbomb == true)
            {
                canbomb = false;
                Instantiate(BombPrefab, this.gameObject.transform.position, this.gameObject.transform.rotation);
                Invoke("bombing", 3f);
            }
        }

        else
        {
            characterState = CharacterState.Idle;
        }
    }

    void bombing()
    {
        canbomb = true;
    }


    void UpdateAnimationAndMove()
    {//if the vector 3 is not all 0
        if (change != Vector3.zero)
        {
           
            animator.SetFloat("moveX", change.x);
          
            animator.SetFloat("moveY", change.y);
 

        }

    }

    public void RaiseItem()
    {//if current item is not nothing


        recivedItemSprite.sprite = playerInventory.currentItem.itemSprite;
        StartCoroutine(Itemraisedsprite());

    }

    private IEnumerator Itemraisedsprite()
    {
        yield return new WaitForSeconds(3f);
        recivedItemSprite.sprite = null;


    }


    public void Knock(Rigidbody2D myRidgidbody, float knockTime, float damage)
    {


        if (currentarmour.RuntimeValue <= 0)

        {


            StartCoroutine(KnockCo(myRidgidbody, knockTime));

            //current health is - by the damage
            currentHealth.RuntimeValue -= damage;

            playerHealthSignal.Raise();
            //raise the player health signal to the health scritpable object

            //if current health is greater than 0
            if (currentHealth.RuntimeValue > 0)
            {
                playerHealthSignal.Raise();
                //run the KnockCo coroutine

                if (audiohit == 1)
                {
                    hit1.Play(0);
                    audiohit = 2;
                }

               else if (audiohit == 2)
                {
                    hit2.Play(0);
                    audiohit = 3;
                }
                else if (audiohit == 3)
                {
                    hit3.Play(0);
                    audiohit = 1;
                }
            }
            else
            {
                DeathEffect();
                dead = true;
            }
        }

        else if (currentarmour.RuntimeValue > 0)
        {
            StartCoroutine(KnockCo(myRidgidbody, knockTime));

            //current health is - by the damage
            currentarmour.RuntimeValue -= damage;

            playerArmourSignal.Raise();
            //raise the player health signal to the health scritpable object

            //if current health is greater than 0
            if (currentarmour.RuntimeValue > 0)
            {
                playerArmourSignal.Raise();

                //run the KnockCo coroutine

            }
        }

    }

    private IEnumerator canattack()
    {
        canattackbool = false;
        yield return new WaitForSeconds(.2f);
        Sword.Play(0);
        yield return new WaitForSeconds(attackdelay);
        canattackbool = true;
    }

    //Knock Back Coroutine
    private IEnumerator KnockCo(Rigidbody2D myRidgidbody, float knockTime)
    {
        characterState = CharacterState.Hit;
        hit = true;
        //wait knockTime to run the loop again
        yield return new WaitForSeconds(knockTime);
        //set rigidbody velocity to 0
        myRigidbody.velocity = Vector2.zero;
        hit = false;
        characterState = CharacterState.Idle;
    }

    private void DeathEffect()
    {
        //if death effect is not not active
        if (deathEffect != null)
        {

            this.gameObject.SetActive(false);
            transform.gameObject.tag = "Untagged";
            GameObject effect = Instantiate(deathEffect, transform.position, Quaternion.identity);


        }
    }


    void playerDirection()

    {
        if (change.x > 0)
        {
            character.SetDirection(Vector2.right);

        }
        else if (change.x < 0)
        {
            character.SetDirection(Vector2.left);

        }
        else if (change.y > 0)
        {
            character.SetDirection(Vector2.up);

        }
        else if (change.y < 0)
        {
            character.SetDirection(Vector2.down);

        }

        if (change.x == 0 && change.y == 0)
        {

            anim.SetState(CharacterState.Idle);
        }
        else
        {

            anim.SetState(CharacterState.Walk);
        }

    }

}
Footer
Â© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
