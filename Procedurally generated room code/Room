using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Room : MonoBehaviour
{
    public GameObject key;

    public bool keyroom; 

    public float width;

    public float height;

    public float X;

    public float Y;

    private bool updatedDoors = false;

    public CanSpawnEnemies spawn;

    public EnemyRoomCounter counter;

    public bool startspawnEnemies;

    public Room (float x, float y)
    {
        X = x;
        Y = y;
    }

    public Door leftDoor;

    public Door upDoor;

    public Door downDoor;

    public Door rightDoor;

    public bool doorLocked;

    public List<Door> doors = new List<Door>();

    public bool playerInRoom;

    public DoorCollider doorCollider;

    // Start is called before the first frame update
public void Start()
    {
      if (RoomController.instance == null)
        {
           
            return;
        }

        Door[] ds = GetComponentsInChildren<Door>();
        foreach(Door d in ds)
        {
            doors.Add(d);
            switch(d.doortype)
            {
                case Door.DoorType.right:
                    rightDoor = d;
                    break;
                case Door.DoorType.left:
                    leftDoor = d;
                    break;
                case Door.DoorType.up:
                    upDoor = d;
                    break;
                case Door.DoorType.down:
                    downDoor = d;
                    break;



            }

            if (keyroom == false)
            {
                key = null;
            }
        }

        RoomController.instance.RegisterRoom(this);
    }

    public void Update()
    {
        spawn = GetComponentInChildren<CanSpawnEnemies>();

        if (spawn.canspawn == true)
        {
            startspawnEnemies = true;
        }

        else if (spawn.canspawn == false)
        {
            startspawnEnemies = false;
        }

        if(name.Contains("End")&& !updatedDoors)
        {
            Invoke("RemoveUnconnectedDoors", 1.0f);
            updatedDoors = true;
        }

        doorlocking();
    }

    void doorlocking()
    {
        if (counter.enemiesLeft == 0)
        {
            doorLocked = false;
        }

        else if (counter.enemiesLeft > 0)
        {
            doorLocked = true;
        }
    }


    public void RemoveUnconnectedDoors()
    {
        foreach(Door door in doors)
        {
            switch(door.doortype)
            {
                case Door.DoorType.right:
                    if (GetRight() == null)
                    {
                        door.gameObject.SetActive(false);
                        doorCollider.rightoff = true;
                    }
                    break;
                case Door.DoorType.left:
                    if (GetLeft() == null)
                    {
                        door.gameObject.SetActive(false);
                        doorCollider.leftoff = true;
                    }
                    break;
                case Door.DoorType.up:
                    if (GetUp() == null)
                    {
                        door.gameObject.SetActive(false);
                        doorCollider.upoff = true;
                    }
                    break;
                case Door.DoorType.down:
                    if (GetDown() == null)
                    {
                        door.gameObject.SetActive(false);
                        doorCollider.downoff = true;
                    }
                    break;
            }
        }
    }


    public Room GetRight()
    {
        if(RoomController.instance.DoesRoomExist(X + 1, Y))
        {
            return RoomController.instance.FindRoom(X + 1, Y);
        }
        return null;
    }

    public Room GetLeft()
    {
        if (RoomController.instance.DoesRoomExist(X - 1, Y))
        {
            return RoomController.instance.FindRoom(X - 1, Y);
        }
        return null;
    }

    public Room GetUp()
    {
        if (RoomController.instance.DoesRoomExist(X, Y + 1))
        {
            return RoomController.instance.FindRoom(X, Y + 1);
        }
        return null;
    }

    public Room GetDown()
    {
        if (RoomController.instance.DoesRoomExist(X, Y - 1))
        {
            return RoomController.instance.FindRoom(X, Y - 1);
        }
        return null;
    }


    public  void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireCube(transform.position, new Vector3(width, height, 0));
    }


    public Vector3 GetRoomCentre()
    {
        return new Vector3(X * width, Y * height);

    }

   public void OnTriggerEnter2D(Collider2D other)
    {
      if(other.tag == "Player")
        {
            RoomController.instance.OnPlayerEnterRoom(this);

            playerInRoom = true;

       if (keyroom == true)
            {
                key.SetActive(true);
            }
   
        }
    }

}
