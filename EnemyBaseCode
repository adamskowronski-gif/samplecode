using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public enum EnemyState
{
    Idle,

    Follow,

    Die,

    stagger,

    Attack,

    Spawn
}
public class EnemyBaseCode : MonoBehaviour
{
    [Header("State Machine")]
    public EnemyState currentState;

    [Header("Enemey Stats")]

   
    public float health;
    public string enemyName;

    public float speed;

    public GameObject enenmyhit;

    [Header("Death Effect")]
    public GameObject deathEffect;
    public Loottable thisloot;
    public audioloot thisaudio;
    public Signal death;
    public EnemycounterScriptable enemybodycount;
    public bool dead;
    public Animator anim;
    public GameObject bloodspirt;
    public GameObject bloodspirt2;
    public GameObject bloodspirt3;
    public bool playerKillable;

    public AudioSource audioHit1;
    public AudioSource audioHit2;
    public AudioSource audioHit3;

    public GameObject deathaudio;

    public int enemyhitcycle = 1;



    public void Start()
    {
        anim = this.gameObject.GetComponent<Animator>();
    }

    public virtual void TakeDamage(float damage)
    {
        // health total is - the damage
        health -= damage;

        //if health is less or = to 0 do death effect
        if (health <= 0 && dead == false)
        {
            DeathEffect();
            Instantiate(deathaudio, transform.position, Quaternion.identity);
            dead = true;
        }
    }

    //Knock back
    public void Knock(Rigidbody2D myRidgidbody, float knockTime, float damage)
    {

        if (playerKillable == true)
        {
         
            {
                if (enemyhitcycle == 1)
                {
                    StartCoroutine(KnockCo(myRidgidbody, knockTime));
                    //call take damage method
                    TakeDamage(damage);
                    StartCoroutine(bloodhit());
                }
                else if (enemyhitcycle == 2)
                    {

                        StartCoroutine(KnockCo(myRidgidbody, knockTime));
                        //call take damage method
                        TakeDamage(damage);
                        StartCoroutine(bloodhit2());
                    }
                else if (enemyhitcycle == 3)
                {

                    StartCoroutine(KnockCo(myRidgidbody, knockTime));
                    //call take damage method
                    TakeDamage(damage);
                    StartCoroutine(bloodhit3());
                }
            }
         
                    
        }
    }

    IEnumerator bloodhit()
    {
        audioHit1.Play(0);
        bloodspirt.SetActive(true);
        yield return new WaitForSeconds(.5f);
        bloodspirt.SetActive(false);
        enemyhitcycle=2;

    }

    IEnumerator bloodhit2()
    {
        audioHit2.Play(0);
        bloodspirt2.SetActive(true);
        yield return new WaitForSeconds(.5f);
        bloodspirt2.SetActive(false);
        enemyhitcycle = 3;
    }

    IEnumerator bloodhit3()
    {
        audioHit3.Play(0);
        bloodspirt3.SetActive(true);
        yield return new WaitForSeconds(.5f);
        bloodspirt2.SetActive(false);
        enemyhitcycle = 1;
    }

    public virtual IEnumerator KnockCo(Rigidbody2D myRidgidbody, float knockTime)
    {    // if ridgid boy is not equal to null
        
            if (myRidgidbody != null)
            {
                anim.SetBool("walking", false);
                anim.SetBool("hit", true);
                //wait knockTime to run the loop again
                yield return new WaitForSeconds(knockTime);
           

                //set rigidbody velocity to 0
                myRidgidbody.velocity = Vector2.zero;
                //enemystate set to idol
                currentState = EnemyState.Idle;
                //set rigidbody velocity to 0
                myRidgidbody.velocity = Vector2.zero;
                anim.SetBool("walking", true);
                anim.SetBool("hit", false);

            }
            else if (myRidgidbody == null)
            {

            }
        
        
    }
    //Death Effect
    public void DeathEffect()
    {
        this.gameObject.SetActive(false);
        MakeLoot();
        //if death effect is not not active
        if (deathEffect != null)
        {

            GameObject effect = Instantiate(deathEffect, transform.position, Quaternion.identity);
            enemybodycount.bodyCount++;
            death.Raise();
     
        }
    }

    private void MakeLoot()
    {

        //if a loot table exists, drop loot
        if (thisloot != null)
        {
            PowerUp current = thisloot.LootsPowerup();
            
            if (current != null)
            {
               
                Instantiate(current.gameObject, transform.position, Quaternion.identity);
               
            }
        }

      
    }

    

}

